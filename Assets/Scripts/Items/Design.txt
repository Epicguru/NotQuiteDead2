
Items are in-game objects that can be collected and stored in the inventory.
Items are stored within inventories, which are grid-like structures.
Items have a certain volume, which can change. Each item has data, such as it's current volume,
attributes, condition etc.

Each item has a base, fixed state, but must also be able to change condition and state at runtime.
This means that a way to have base state that is also changeable at runtime is needed. Ideally I want this to all be edited
externally by modders, but it is currently not a requirement.

Let's suppose we have two classes:
The Item.cs class, which is a NetworkBehaviour component that is attached to in-game objects as a component.
The ItemData.cs class, which contains inventory info about an item. This is the place where we need to do the
stored vs. current state difference.

An Item.cs object will have a reference to an ItemData, which in turn will store data about the real world object.
This way once the Item.cs object is destroyed or removed, it's state can be saved and can be created again later.
This is a way of separating graphics from back-end data structure. It will also help with an inventory system: UI inventory
items only need a reference to an InventoryItem.cs to draw and correctly display an item.

InventoryItems need to have a way to be loaded from file but also be changed at runtime. For this purpose I will use Json serialization,
a flexible and neat way to save and load complex data. Behind the scenes this will also be used to save the current state
of any InventoryItem, as well as a way to transfer data between servers and clients.

The real world Item.cs class will have to have certain animations or states that are consistent between all items to make the
item system as robust as possible. Simple states would include Dropped, Stored, Equipping, Equipped, Dequipping.
More advanced states for more complex items such as guns would include Shoot, Reload etc. These more advanced states would be managed
by their own class whereas the simple states, in both animation and code, are managed by the Item.cs class.
